major_version: "local"
minor_version: ""
default_target_cpu: "same_as_host"

default_toolchain {
  cpu: "darwin"
  toolchain_identifier: "osx"
}

# We use Clang on Ubuntu.
default_toolchain {
  cpu: "k8"
  toolchain_identifier: "clang-chromium-linux"
}

# Chromium's Clang on Linux
toolchain {
  toolchain_identifier: "clang-chromium-linux"
  abi_libc_version: "local"
  abi_version: "local"
  builtin_sysroot: ""
  compiler: "clang"

  # Include paths
  compiler_flag: "--sysroot=external/org_chromium_sysroot_linux_x64"
  compiler_flag: "-nostdinc++"
  compiler_flag: "-isystem"
  compiler_flag: "external/org_chromium_libcxxabi/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/org_chromium_libcxx/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/org_chromium_clang_linux_x64/lib/clang/6.0.0/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/org_chromium_sysroot_linux_x64/usr/include/x86_64-linux-gnu"
  compiler_flag: "-isystem"
  compiler_flag: "external/org_chromium_sysroot_linux_x64/usr/include"

  cxx_builtin_include_directory: "%package(@org_chromium_clang_linux_x64//lib/clang/6.0.0/include)%"
  cxx_builtin_include_directory: "%package(@org_chromium_sysroot_linux_x64//usr/include/x86_64-linux-gnu)%"
  cxx_builtin_include_directory: "%package(@org_chromium_sysroot_linux_x64//usr/include)%"

  cxx_flag: "-std=c++1y"
  host_system_name: "local"
  linker_flag: "-latomic"
  linker_flag: "-lm"
  linker_flag: "-lpthread"
  linker_flag: "--sysroot=external/org_chromium_sysroot_linux_x64"

  needsPic: true
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  supports_fission: false
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  target_cpu: "k8"
  target_libc: "local"
  target_system_name: "local"

  # Chromium toolchain, no gcov
  tool_path {name: "gcc" path: "tool_wrappers/linux_x64/chromium_clang" }
  tool_path {name: "ld" path: "tool_wrappers/linux_x64/chromium_ld" }
  tool_path {name: "ar" path: "tool_wrappers/linux_x64/chromium_ar" }
  tool_path {name: "cpp" path: "tool_wrappers/linux_x64/chromium_clang" }
  tool_path {name: "nm" path: "tool_wrappers/linux_x64/chromium_nm" }
  tool_path {name: "objcopy" path: "tool_wrappers/linux_x64/chromium_objcopy" }
  tool_path {name: "objdump" path: "tool_wrappers/linux_x64/chromium_objdump" }
  tool_path {name: "strip" path: "tool_wrappers/linux_x64/chromium_strip" }
  tool_path {name: "gcov" path: "/bin/false" }

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  unfiltered_cxx_flag: "-no-canonical-prefixes"
  linker_flag: "-no-canonical-prefixes"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-fstack-protector"
  compiler_flag: "-fPIE"
  linker_flag: "-pie"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  compiler_flag: "-fdiagnostics-color=always"

  # All warnings are enabled. Maybe enable -Werror as well?
  compiler_flag: "-Wall"
  # Enable a few more warnings that aren't part of -Wall.
  compiler_flag: "-Wunused-parameter"
  # But disable some that are problematic.
  compiler_flag: "-Wno-sequence-point" # has false positives
  
  # Uncomment for debugging.
  # compiler_flag: "-v"
  # linker_flag: "-v"

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  # Stamp the binary with a unique identifier.
  linker_flag: "-Wl,--build-id=md5"
  linker_flag: "-Wl,--hash-style=gnu"

  # Stamp the binary with a unique identifier.
  linker_flag: "-Wl,--build-id=md5"
  linker_flag: "-Wl,--hash-style=gnu"

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT

    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
    # even generally? However, that can't happen here, as it requires special
    # handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
}

# Chromium Clang on OS X
toolchain {
  toolchain_identifier: "osx"
  abi_version: "local"
  abi_libc_version: "local"
  builtin_sysroot: ""
  compiler: "compiler"
  host_system_name: "local"
  needsPic: true
  target_libc: "macosx"
  target_cpu: "darwin"
  target_system_name: "local"

  
  # Uncomment for debugging.
  # compiler_flag: "-v"

  cxx_flag: "-std=c++1y"
  linker_flag: "-undefined"
  linker_flag: "dynamic_lookup"
  linker_flag: "-headerpad_max_install_names"
  ar_flag: "-static"
  ar_flag: "-s"
  ar_flag: "-o"
  compiler_flag: "-nostdinc++"
  compiler_flag: "-isystem"
  compiler_flag: "external/org_chromium_clang_mac/include/c++/v1"
  compiler_flag: "-isystem"
  compiler_flag: "external/org_chromium_clang_mac/lib/clang/5.0.0/include"
  compiler_flag: "-isystem"
  compiler_flag: "/usr/include"
  cxx_builtin_include_directory: "/usr/include"
  cxx_builtin_include_directory: "/System/Library/Frameworks"
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"

  # Anticipated future default.
  unfiltered_cxx_flag: "-no-canonical-prefixes"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  compiler_flag: "-D_FORTIFY_SOURCE=1"
  compiler_flag: "-fstack-protector"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  compiler_flag: "-fcolor-diagnostics"

  # All warnings are enabled. Maybe enable -Werror as well?
  compiler_flag: "-Wall"
  # Enable a few more warnings that aren't part of -Wall.
  compiler_flag: "-Wthread-safety"
  compiler_flag: "-Wself-assign"

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  # Anticipated future default.
  linker_flag: "-no-canonical-prefixes"

  tool_path {name: "ld" path: "/usr/bin/ld" }
  tool_path {name: "cpp" path: "/usr/bin/cpp" }
  tool_path {name: "dwp" path: "/usr/bin/dwp" }
  tool_path {name: "gcov" path: "/usr/bin/gcov" }
  tool_path {name: "nm" path: "/usr/bin/nm" }
  tool_path {name: "objcopy" path: "/usr/bin/objcopy" }
  tool_path {name: "objdump" path: "/usr/bin/objdump" }
  tool_path {name: "strip" path: "/usr/bin/strip" }
  tool_path {name: "gcc" path: "tool_wrappers/mac/osx_clang_wrapper.sh" }
  tool_path {name: "ar" path: "/usr/bin/libtool" }

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT
    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or even generally?
    # However, that can't happen here, as it requires special handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
  }
  linking_mode_flags { mode: DYNAMIC }
}
